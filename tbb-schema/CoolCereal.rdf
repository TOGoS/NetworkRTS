<Schema xmlns="http://ns.nuke24.net/TBB/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
	<format xml:space="preserve" xml:lang="en">
		CoolCereal serialization format, based on TBB\x81.
		Additional documentation may be available at
		http://www.nuke24.net/docs/2014/CoolCereal.html
		
		The referenced TBB schema document may be:
		- This RDF document, which gives an empty stack and a single
		  'load opcode library' opcode, or
		- Another CoolCereal blob, which will be interpreted to initialize
		  the opcode library and stack.  i.e. a preamble.  This serves as
		  a compression scheme and has the exact same effect as including
		  the referenced blob inline would.
		
		The payload (after the TBB header) format is a bytecode stream.
		
		The only predefined opcode, 0x41, loads additional opcodes.
		It is followed by 21 bytes, making the entire instruction 22 bytes:
		
		  0x41, destination opcode (1 byte), opcode identifier (20 bytes)
		
		The 'destination opcode' is the opcode to be replaced.
		The source name identifies the behavior of the opcode.
		The opcode identifier should be the SHA-1 hash of a text or
		machine-readable file describing the opcode, but implementations
		may hard-code the name to a specific meaning so that they don't
		need to actually load the referenced resource.
		
		Every other opcode pushes its signed value onto the stack as an integer.
		e.g. 0 pushes a zero onto the stack, 0xFF pushes a -1.  Normally
		opcode ranges 0..0x40 and 0xA0..0xFF will be reserved for this purpose. 
	</format>
</Schema>
