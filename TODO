Game19 to-do list.
i.e. things to work on when you get sick of working on some other component

- Fix collision handling
  - Make generic
  
  Different nontile roles:
  - Platform
    - can move other objects, but their movement is not influenced by others
    - act as if they have infinite mass 
    - when 2 platforms collide they just occupy the same space for a bit
    - has bounciness, used by others to determine stuff
  - Normal physical things - players, large slow projectiles, boxes
    - Have mass, bounciness
  - Pickups and decorations
    - Influenced by others, but do not influence others basic physics
    - May still cause things to happen when collided with
  - Purely decorative
    - Neither influenced nor influencing - ignored entirely by collision detection and physics

- Include entities in world save/load

Entity/entity collisions
- Use to make some moving platforms or something
- Can also make doors that way

Old people that talk to you.

Network-controllable bridge or door made of blocks.

Spikes should only hurt you when you fall on the spikey side.

Ladders!

Suit repair kits

Client-server networking
- Serialize all data
- Client and server may use a shared hash-addressed datastore

Android client
- Should probably flesh out client-server protocol
  and refactor image classes to give room for animations
  before taking this on

Continuous movement entities
- Separate
  - Fast (bullet) entities
  * Normal dynamic entities
  - Static (not requiring continuous update) entities
  * Quadtree for solids

Image compositor
- Diffuse
- Radiant (office lights, stars, lit displays)
- left-right and top-bottom normal maps
These may be compiled to simple images assuming standard conditions.

Remember to allow for animations
- Discrete (bunch of frames)
  - flag to indicate interpolation desired or not
- Continuous (vector-based, like flash cartoons; would be useful for e.g. waving trees, spinning fans)
- Would need to combine many animations into one in a scalable way
  for drawing large composite nodes (e.g. distant background planes)

## Completed! ##

* Save/load RST.

* Make content creation possible/fun
  * quadtree editor
  * simple (probably JSON-based) tile format

* Figure out why 'R' (revert simulation) doesn't work after jetman dies.
  (Simulation was ignoring messages for itself unless they were also relevant to the world)

* Figure out why simulation gets all slow whn jetman dies.
  (EventLooper was buggy)
